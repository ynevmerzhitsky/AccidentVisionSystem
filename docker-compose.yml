services:
  web:
    restart: always
    build: .
    env_file:
      - .env
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    volumes:
      - .:/code
      - videos:/code/videos
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  worker:
    restart: always
    build: .
    env_file:
      - .env
    command: celery -A accidentvision worker --loglevel=info
    volumes:
      - .:/code
      - videos:/code/videos
    depends_on:
      rabbitmq:
        condition: service_healthy

  consumer:
    restart: always
    build: .
    env_file:
      - .env
    command: python manage.py consume_results
    volumes:
      - .:/code
      - videos:/code/videos
    depends_on:
      rabbitmq:
        condition: service_healthy

  db:
    restart: always
    image: postgres:15
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5

  rabbitmq:
    container_name: rabbitmq
    restart: always
    image: rabbitmq:3.8.16-management
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    environment:
      RABBITMQ_DEFAULT_VHOST: "/"
      RABBITMQ_DEFAULT_USER: "guest"
      RABBITMQ_DEFAULT_PASS: "guest"
    env_file:
      - .env
    ports:
      - "5672:5672"
      - "15672:15672"
    healthcheck:
      test: [ "CMD", "rabbitmq-diagnostics", "-q", "ping" ]
      interval: 10s
      timeout: 5s
      start_period: 10s
      retries: 5

volumes:
  pgdata:
  videos:
  rabbitmq_data:
